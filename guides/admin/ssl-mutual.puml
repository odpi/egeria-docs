' SPDX-License-Identifier: Apache-2.0
' Copyright Contributors to the Egeria project.

@startuml

autonumber "[0]"


skinparam noteBackgroundColor LightSkyBlue
skinparam participant {
    backgroundColor Lavender
}

skinparam sequenceMessageAlign direction

title TLS exchange showing client/server access to truststores and keystores (2 way SSL - RFC5246)


database ClientKeyStore #lightgreen
database ClientTrustStore #lightgreen
participant Client
participant Server
database ServerTrustStore #lightgreen
database ServerKeyStore #lightgreen

group TCP handshake

    Client -> Server: **SYN**
    Server --> Client: **SYN**, **ACK**
    Client -> Server: **ACK**
end

group TLS handshake

    Client -> Server: **ClientHello** (client-random, TLS version, ciphers, compression,extensions)
    Server -> ServerKeyStore: get my certificate (private key)
    note over ServerKeyStore: Looks for first matching server key
    ServerKeyStore -> Server: returns certificate (public key)
    Server -> Client: **ServerHello** (server-random, agreed cipher)


    Server -> Client: **Certificate** (server certificate chain)
    Client -> ClientTrustStore: retrieve certs to trust
    ClientTrustStore -> Client: certificate list
    note over Client: check certificate against chain - ie known CA or certificate

    group #oldLace mutual SSL only
        Server -> Client: **CertificateRequest**
        Server -> Client: **ServerHelloDone**

        Client -> ClientKeyStore: get my certificate (private key)
        note over ClientKeyStore: Looks for best matching certificate
        ClientKeyStore -> Client: return certificate (public key)
        Client->Server: **Certificate** (client certificate chain)
    end

    note over Client: generates a pre-master secret encrypted using server's public key
    Client -> Server: **ClientKeyExchange** (premaster secret)

    group #oldLace mutual SSL only
        Client->Server: **CertificateVerify**
        note over Server: decrypts pre-master key using private key
    end

    note over Server: creates Master secret using premaster secret, client-random, server-random
    Client -> Server: **ChangeCipherSpec**
    Client -> Server: <&lock-locked>**Finished**
    Server -> Client: **ChangeCipherSpec**
    Server -> Client: <&lock-locked>**Finished**

end

group Application  Use
   Client -> Server: <&lock-locked> GET /path/request
   Server -> Client: <&lock-locked> response
end
@enduml
